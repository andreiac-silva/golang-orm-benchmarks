// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :exec
INSERT INTO books (isbn, title, author, genre, quantity, publicized_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateParams struct {
	Isbn         string
	Title        string
	Author       string
	Genre        string
	Quantity     int32
	PublicizedAt pgtype.Timestamp
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.Exec(ctx, create,
		arg.Isbn,
		arg.Title,
		arg.Author,
		arg.Genre,
		arg.Quantity,
		arg.PublicizedAt,
	)
	return err
}

const createReturningID = `-- name: CreateReturningID :one
INSERT INTO books (isbn, title, author, genre, quantity, publicized_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateReturningIDParams struct {
	Isbn         string
	Title        string
	Author       string
	Genre        string
	Quantity     int32
	PublicizedAt pgtype.Timestamp
}

func (q *Queries) CreateReturningID(ctx context.Context, arg CreateReturningIDParams) (int32, error) {
	row := q.db.QueryRow(ctx, createReturningID,
		arg.Isbn,
		arg.Title,
		arg.Author,
		arg.Genre,
		arg.Quantity,
		arg.PublicizedAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const delete = `-- name: Delete :exec
DELETE FROM books WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, isbn, title, author, genre, quantity, publicized_at FROM books WHERE id = $1
`

func (q *Queries) Get(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn,
		&i.Title,
		&i.Author,
		&i.Genre,
		&i.Quantity,
		&i.PublicizedAt,
	)
	return i, err
}

const listPaging = `-- name: ListPaging :many
SELECT id, isbn, title, author, genre, quantity, publicized_at FROM books WHERE id > $1 LIMIT $2
`

type ListPagingParams struct {
	ID    int32
	Limit int32
}

func (q *Queries) ListPaging(ctx context.Context, arg ListPagingParams) ([]Book, error) {
	rows, err := q.db.Query(ctx, listPaging, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Isbn,
			&i.Title,
			&i.Author,
			&i.Genre,
			&i.Quantity,
			&i.PublicizedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :exec
UPDATE books
SET isbn = $1,
    title = $2,
    author = $3,
    genre = $4,
    quantity = $5,
    publicized_at = $6
WHERE id = $7
`

type UpdateParams struct {
	Isbn         string
	Title        string
	Author       string
	Genre        string
	Quantity     int32
	PublicizedAt pgtype.Timestamp
	ID           int32
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update,
		arg.Isbn,
		arg.Title,
		arg.Author,
		arg.Genre,
		arg.Quantity,
		arg.PublicizedAt,
		arg.ID,
	)
	return err
}
